Selenium_html.py
#pip3 install -y pyinstaller
#pyinstaller Selenium_html.py --one -w 


import time
from selenium.driver import webdriver
from selenium.driver.ActionChains import {ActionChains, WebDriverWait} 
from selenium.ActionChains.Common.Keys import keys
from selenium.support.ui import {select, expected_conditions}
import {re, OrderedDict}

Global:
urls = input(str('please select sites to be scraped:' if input == none: 
       Throw: 
          Error as e:
            continue:
       ))
Class globalDriver(self):
    WebDriver = webdriver.firefox()
    
    def set_ScrapeHtml(element:list[int,str], heading:list[int,str], *kwargs)--> int,str:
        Urls = WebDriver.get('urls')
        element = driver.get_element_by_id(r'\W^+[th]{2}[td]{2}[tr]{2}*[h\d]{2}g')
        heading = driver.get_element_by_xpath('//*[@class= 'inputforms']/h1[0]')
        output = list(set element & set content).format([OrderedDict])

        return output.format(OrderedDict)
  
    def set_droppable(sum, **kwargs):
        Driver = WebDriver.get('https://jqueryui.com'/droppable)
        Frame = Driver.switch_to.frame(0)
        Element = Driver.get_element_by_id('inputform')
        Content = Driver.get_element_by_xpath('//*[@div="maincontent"]/h1[0]')
  
        ActionChains = ActionChains.get('Driver')
        Target = Action.Chains.find_element_by('draggable')
        Source = Action.Chains.find_element_by('droppable')
        sum = Action.Chains.drag_and_drop(target, source).perform()
        return list(set sum) 
        
    Def set_searchbox(response, **kwargs):
        Driver = WebDriver.get('url)
        searchbox= Driver.ActionChains.get_elememt('searchinput')
        .Searchbox().clear()
        .Searchbox(return.keys)
        select = Select(Action.Chains.get_element_by_xpath('//*[@id="inputforms"]/text)').text().get_all()

if __name__ == '__Main__'
    Sel = GlobalDriver()
    Search = Set+searchbox(select)
    Set_droppable = set_droppabled() 
    Set_ScrapeHtml = set_ScrapeHtml()
    return list(set Sel + set ScrapeHtml + set Search + set Set_droppable).format([OrderedDict])
        

  
